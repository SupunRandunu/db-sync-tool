CREATE TABLE IDN_OAUTH2_ACCESS_TOKEN_SYNC (
  ID INTEGER,
  TOKEN_ID VARCHAR (255),
  ACCESS_TOKEN VARCHAR2 (255),
  REFRESH_TOKEN VARCHAR2 (255),
  CONSUMER_KEY_ID INTEGER,
  AUTHZ_USER VARCHAR2 (100),
  TENANT_ID INTEGER,
  USER_DOMAIN VARCHAR2 (50),
  USER_TYPE VARCHAR (25),
  GRANT_TYPE VARCHAR (50),
  TIME_CREATED TIMESTAMP,
  REFRESH_TOKEN_TIME_CREATED TIMESTAMP,
  VALIDITY_PERIOD NUMBER(19),
  REFRESH_TOKEN_VALIDITY_PERIOD NUMBER(19),
  TOKEN_SCOPE_HASH VARCHAR2 (32),
  TOKEN_STATE VARCHAR2 (25) DEFAULT 'ACTIVE',
  TOKEN_STATE_ID VARCHAR (128) DEFAULT 'NONE',
  SUBJECT_IDENTIFIER VARCHAR(255),
  PRIMARY KEY (ID))
;
/


CREATE TABLE IDN_OAUTH2_TOKEN_SCOPE_SYNC (
    ID INTEGER,
    TOKEN_ID VARCHAR2 (255),
    TOKEN_SCOPE VARCHAR2 (60),
    TENANT_ID INTEGER DEFAULT -1,
    PRIMARY KEY (ID));
/

CREATE SEQUENCE token_seq START WITH 1;
/

CREATE SEQUENCE token_scope_seq START WITH 1;
/

CREATE OR REPLACE TRIGGER token_sync_trig
    BEFORE INSERT ON IDN_OAUTH2_ACCESS_TOKEN_SYNC
        FOR EACH ROW
    BEGIN
      SELECT token_seq.NEXTVAL
      INTO   :new.id
      FROM   dual;
END;
/

CREATE OR REPLACE TRIGGER token_scope_sync_trig
    BEFORE INSERT ON IDN_OAUTH2_TOKEN_SCOPE_SYNC
        FOR EACH ROW
    BEGIN
      SELECT token_scope_seq.NEXTVAL
      INTO   :new.id
      FROM   dual;
END;
/

create or replace trigger table_token_insert after update OR insert on IDN_OAUTH2_ACCESS_TOKEN for each row
begin
  insert into IDN_OAUTH2_ACCESS_TOKEN_SYNC
    (TOKEN_ID,ACCESS_TOKEN,REFRESH_TOKEN,CONSUMER_KEY_ID,AUTHZ_USER,TENANT_ID,USER_DOMAIN,USER_TYPE,GRANT_TYPE,TIME_CREATED,
    REFRESH_TOKEN_TIME_CREATED,VALIDITY_PERIOD,REFRESH_TOKEN_VALIDITY_PERIOD,TOKEN_SCOPE_HASH,TOKEN_STATE,TOKEN_STATE_ID,SUBJECT_IDENTIFIER)
  values
    (:new.TOKEN_ID,:new.ACCESS_TOKEN,:new.REFRESH_TOKEN,:new.CONSUMER_KEY_ID,:new.AUTHZ_USER,:new.TENANT_ID,:new.USER_DOMAIN,:new.USER_TYPE,:new.GRANT_TYPE,:new.TIME_CREATED,
    :new.REFRESH_TOKEN_TIME_CREATED,:new.VALIDITY_PERIOD,:new.REFRESH_TOKEN_VALIDITY_PERIOD,:new.TOKEN_SCOPE_HASH,:new.TOKEN_STATE,:new.TOKEN_STATE_ID,:new.SUBJECT_IDENTIFIER);
end;
/

create or replace trigger table_token_scope_insert after update OR insert on IDN_OAUTH2_ACCESS_TOKEN_SCOPE for each row
begin
  insert into IDN_OAUTH2_TOKEN_SCOPE_SYNC
    (TOKEN_ID,TOKEN_SCOPE,TENANT_ID)
  values
    (:new.TOKEN_ID,:new.TOKEN_SCOPE,:new.TENANT_ID);
end;
/


MERGE INTO IDN_OAUTH2_ACCESS_TOKEN USING dual ON ( TOKEN_ID = ? )
WHEN MATCHED THEN UPDATE SET ACCESS_TOKEN=?,REFRESH_TOKEN=?,CONSUMER_KEY_ID=?,AUTHZ_USER=?,TENANT_ID=?,USER_DOMAIN=?,USER_TYPE=?,GRANT_TYPE=?,TIME_CREATED=?,
    REFRESH_TOKEN_TIME_CREATED=?,VALIDITY_PERIOD=?,REFRESH_TOKEN_VALIDITY_PERIOD=?,TOKEN_SCOPE_HASH=?,TOKEN_STATE=?,TOKEN_STATE_ID=?,SUBJECT_IDENTIFIER=?
WHEN NOT MATCHED THEN INSERT
    VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?);
/

MERGE INTO IDN_OAUTH2_ACCESS_TOKEN_SCOPE USING dual ON (TOKEN_ID = ? and  TOKEN_SCOPE = ?)
  WHEN MATCHED THEN UPDATE SET
    TENANT_ID = ?
  WHEN NOT MATCHED THEN INSERT
    VALUES (?,?,?);
/